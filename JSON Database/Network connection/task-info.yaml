type: edu
files:
- name: src/server/Main.java
  visible: true
  text: |
    package server;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/JsonDatabaseTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    public class JsonDatabaseTest extends StageTest<String> {

        private static final String CORRECT_SERVER_OUTPUT =
            "Server started!\n" +
                "Received: Give me a record # N\n" +
                "Sent: A record # N was sent!";

        private static final String CORRECT_CLIENT_OUTPUT =
            "Client started!\n" +
                "Sent: Give me a record # N\n" +
                "Received: A record # N was sent!";

        @DynamicTestingMethod
        CheckResult test() throws InterruptedException {

            TestedProgram server = new TestedProgram(server.Main.class);
            server.startInBackground();
            Thread.sleep(500);

            String serverOutput = server.getOutput().trim();

            if (!serverOutput.trim().equals("Server started!")) {
                return CheckResult.wrong("Server output should be 'Server started!' until a client connects!");
            }

            TestedProgram client = new TestedProgram(client.Main.class);

            String clientOutput = client.start();
            serverOutput += "\n" + server.getOutput();

            String[] serverOutputLines = serverOutput.split("\n");

            if (serverOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the server output should contain 3 lines!");
            }

            String serverOutputLastLine = serverOutputLines[serverOutputLines.length - 1];

            if (!serverOutputLastLine.contains("Sent: A record #") || !serverOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Server output after client connects to the server should be:\n"
                    + CORRECT_SERVER_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + serverOutput);
            }

            String[] clientOutputLines = clientOutput.split("\n");

            if (clientOutputLines.length != 3) {
                return CheckResult.wrong("After the client connects to the server, the client output should contain 3 lines!");
            }

            String clientOutputLastLine = clientOutputLines[clientOutputLines.length - 1];

            if (!clientOutputLastLine.contains("Received: A record #") || !clientOutputLastLine.contains("was sent!")) {
                return CheckResult.wrong("Client output after client connects to the server should be:\n"
                    + CORRECT_CLIENT_OUTPUT + "\n\nWhere N is some number.\n\nYour output:\n" + clientOutput);
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/server/Status.java
  visible: true
  text: |
    package server;

    public enum Status {
        OK, ERROR
    }
  learner_created: true
- name: src/server/Server.java
  visible: true
  text: |
    package server;

    import java.util.ArrayList;
    import java.util.List;

    public class Server {

        private static final int DB_SIZE = 100;

        private final List<String> db = new ArrayList<>(DB_SIZE + 1);
        {
            for (int i = 0; i <= DB_SIZE; i++) {
                db.add("");
            }
        }

        public Result get(int cellIndex) {
            if (invalid(cellIndex)) {
                return Result.error();
            }
            String data = db.get(cellIndex);
            if (data.isEmpty()) {
                return Result.error();
            }
            return Result.ok(data);
        }

        public Result set(int cellIndex, String data) {
            if (invalid(cellIndex)) {
                return Result.error();
            }
            db.set(cellIndex, data);
            return Result.ok();
        }

        public Result delete(int cellIndex) {
            if (invalid(cellIndex)) {
                return Result.error();
            }
            db.set(cellIndex, "");
            return Result.ok();
        }

        private boolean invalid(int index) {
            return index < 1 || index > DB_SIZE;
        }
    }
  learner_created: true
- name: src/server/Result.java
  visible: true
  text: |
    package server;

    public class Result {

        private final Status status;
        private String data;
        private String error;

        public Result(Status status) {
            this.status = status;
        }

        public Status getStatus() {
            return status;
        }

        public String getData() {
            return data;
        }

        private void setData(String data) {
            this.data = data;
        }

        public String getError() {
            return error;
        }

        private void setError(String error) {
            this.error = error;
        }

        public static Result ok(String data) {
            var res = new Result(Status.OK);
            res.setData(data);
            return res;
        }

        public static Result ok() {
            return Result.ok("");
        }

        public static Result error(String error) {
            var res = new Result(Status.ERROR);
            res.setError(error);
            return res;
        }

        public static Result error() {
            return Result.error("ERROR");
        }

        public boolean statusOk() {
            return status == Status.OK;
        }
    }
  learner_created: true
- name: src/client/Main.java
  visible: true
  text: |
    package client;

    public class Main {

        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/65/stages/349/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sun, 20 Dec 2020 19:50:26 UTC
record: 2
